package joins;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.Map;

import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class MapperJoin {

	public static class MyMapper extends Mapper<LongWritable, Text, Text, Text>{
		private Map<String, String> mymap = new HashMap<String, String>();
		private Text outputKey = new Text();
		private Text outputValue = new Text();
		
		//Fetch data from file and store on distributed cache
		protected void setup(Context context) throws IOException, InterruptedException{
			Path files[] =  DistributedCache.getLocalCacheFiles(context.getConfiguration());
			
			for(Path p: files){
				if(p.getName().equals("abc.dat")){
					BufferedReader reader = new BufferedReader(new FileReader(p.toString()));
					String line = reader.readLine();
					while(line != null){
						String[] token = line.split("\t");
						String ab = token[0];
						String state = token[1];
						mymap.put(ab, state);
						line = reader.readLine();
					}
				}
			}
			if(mymap.isEmpty()){
				throw new IOException("Not able to load abbriviation");
			}
		}
		
		protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException{
			String row = value.toString();
			String[] token = row.split("\t");
			String inab = token[0];
			String state = mymap.get(inab);
			outputKey.set(state);
			outputValue.set(row);
			context.write(outputKey, outputValue);
		}
	}
	
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException{
		Job job = new Job();
	    job.setJarByClass(MapperJoin.class);
	    job.setJobName("Mapper Join");
	    job.setNumReduceTasks(0);
	    
	    try{
	    DistributedCache.addCacheFile(new URI("/Data/March12/abc.dat"), job.getConfiguration());
	    }catch(Exception e){
	    	System.out.println(e);
	    }
	    
	    job.setMapperClass(MyMapper.class);
	    
	    job.setMapOutputKeyClass(Text.class);
	    job.setMapOutputValueClass(Text.class);
	    
	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	    
	    job.waitForCompletion(true);
	}
}
